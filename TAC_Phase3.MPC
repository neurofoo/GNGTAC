\\----------------------------------------------------------------------------\\
\\ PROGRAM INFORMATION
\\
\\ Two-Alternative Choice Training
\\ Phase 3 - Training the 'go' behavior for second odor
\\ Original Date: 	  April 24, 2009
\\ Last Update:	          Nov 19, 2011
\\ Version number 2.0
\\
\\ This file is to be used for the final training phase of TAC odor
\\ discrimination task
\\
\\ Remove all levers and/or GO nosepokes from the box
\\ Reward schedule: 	100% (every time rat nosepokes at odor port and does correct go behavior)
\\ Intertrial interval:	7 seconds
\\ Two odorants: 	csPlusLEFT; csPlusRIGHT
\\ Odor is turned on for two seconds prior to houselight on to charge odor tubes
\\ Odor is presented with the nosepoke and turned off when withdrawing from nosepoke.
\\ Vacuum is only OFF during nose poke period

\\----------------------------------------------------------------------------\\
\\ AUTHORSHIP, CITATIONS, & LICENSE
\\
\\ This program was written by
\\ Donald E Frederick [donald at uchicago dot edu]
\\ Daniel Rojas-Libano
\\
\\ in the laboratory of Prof Leslie M Kay [lkay at uchicago dot edu].
\\
\\ Lab website: kaylab.uchicago.edu/
\\
\\This program was used in the following experiments. Please use this citation if you
\\publish something using our code:
\\
\\ Frederick, D. E., Rojas-Líbano, D., Scott, M., & Kay, L. M. (2011). Rat
\\ behavior in go/no-go and two-alternative choice odor discrimination:
\\ Differences and similarities. Behavioral neuroscience, 125(4), 588-603.
\\ doi:10.1037/a0024371
\\
\\
\\ This program is free software: you can redistribute it and/or modify
\\ it under the terms of the GNU General Public License as published by
\\ the Free Software Foundation, either version 3 of the License, or
\\ (at your option) any later version.
\\
\\ This program is distributed in the hope that it will be useful,
\\ but WITHOUT ANY WARRANTY; without even the implied warranty of
\\ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\\ GNU General Public License for more details.
\\
\\ You should have received a copy of the GNU General Public License
\\ along with this program.  If not, see <http://www.gnu.org/licenses/>.

\\----------------------------------------------------------------------------\\
\\ DEFINITIONS

\\ Constants:

\\ Inputs
    ^nspk = 1 		\\ ODOR port is input 1
    ^goInptLeft = 2	\\ Go Input LEFT
    ^goInptRight = 3	\\ Go Input RIGHT
    ^manswitch = 4 	\\ Manual switch is input 4

\\ Outputs
    ^houseLight = 1 	\\ Houselight is output 1
    ^pellet = 2 	\\ Pellet (reward) dispenser is output 2
    ^odorA = 3 		\\ Odor A is output 3; odorA is GO odor LEFT
    ^odorB = 4		\\ Odor B is output 4; odorB is GO odor RIGHT
    ^vacuum = 8  	\\ Vacuum line output 8; vacuum is near nosepoke and
                        \\   siphons off odor until nosepoke, at which time it 
                        \\   is turned off and odor goes to port

\\ Outputs for TTL --> Neuralynx ; this uses only 4bits
\    ^bit1 = 17 
\    ^bit2 = 18
\    ^bit3 = 19
\    ^bit4 = 20

\\ Variables
\\  D <-- # of manual rewards
\\  E <-- # of rewards for correct performance
\\  F <-- # total trials
\\  G <-- # of attempted trials 	   \\ For phaseI G=H
\\  H <-- # of correct trials	   \\ For phaseII H=J
\\  J <-- # of go  odor A (LEFT) attempts	       
\\  K <-- # of go LEFT correct       \\ # odor A correct
\\  L <-- # of odor B (RIGHT) attempts	        
\\  M <-- # of go RIGHT correct      \\ # odor B correct
\\  N <-- trial type chosen          \\ Possible values N=1 or N=2
\\  O <-- last trial sniff time to show in box 1
\\  P <-- Mean sniff time
\\  Q <-- Amount of time nspk sampled
\\  R <-- Index for S <=> This is the same as G, so use G instead 
\\  S <-- Array for nspk sampling durations
\\  T <-- Trial type for attempt trial array and performance

\\ Event Codes
\\  3 <-- wentLeft                   \\went to LEFT GO PORT
\\  4 <-- house light on
\\  5 <-- house light off
\\  6 <-- nosepoke ON (odor port)
\\  7 <-- nosepoke OFF (odor port)
\\  8 <-- csPlusLeft                 \\odorA, which is CS+ RIGHT
\\  9 <-- wentRight 		   \\went to RIGHT GO PORT
\\  10 <-- csPlusRight	           \\odorB, which is CS+ RIGHT
\\  21 <-- house light off for incorrect go behavior
\\  29 <-- eos

\\ Lists
    LIST A = 1,2     \\ 1 <-- LEFT 
                     \\ 2 <-- RIGHT
                     \\ 3 <-- LEFT NO REWARD;
                     \\       for use with partial reward schedule
                     \\ 4 <-- RIGHT NO REWARD; 
                     \\       for use with partial reward schedule

\\ Arrays
    DIM S=300       \\ Array for recording sampling durations
    DIM T=300       \\ Array for recording trial type for attempted trials
    DIM V=2400      \\ Array for recording events
    DIM Y=3000      \\ Array for recording ALL nspkON/nspkOFF pairs

\\ Indicies
\\  I <-- current index into V
\\  U <-- current index into Y

\\ Counters
\\  X <-- timer that records elapsed times in 10s of ms

\\ Event markers for Z pulses
\\ Z pulses for recording feeder, light
    ^wentLeft = 3	\\ Went to LEFT GO PORT
    ^hsltON   = 4
    ^hsltOFF  = 5
    ^nspkON   = 6
    ^nspkOFF  = 7
    ^csPlusLeft = 8     \\ Odor A, which is a CS+ LEFT
    ^csPlusRight = 9	\\ Odor B, which is CS+ RIGHT
    ^wentRight  = 11	\\ Went to RIGHT GO PORT
    ^hsltOFF2 = 21
    ^eos = 29           \\ End of session

\\----------------------------------------------------------------------------\\
S.S.1, \\ Main body of program 

S1, \\ Initiates session 
	#START: ON ^vacuum ---> S2 
	
S2, \\ Decide which odorant to use;
    \\ drawn pseudorandomly with replacement with uniform probability
        0.01": IF (F=400) OR (G=300)[@TRUE,@FALSE]
                                     @TRUE: Z^eos ---> S31
                                     @FALSE: RANDI N = A ---> S3

S3, \\ Turn on selected odorant & vacuum 
	5": IF N=1 [@TRUE, @FALSE]
                    @TRUE:  ON ^odorA;
                            Z^csPlusLeft;
                            ---> S4
                    
                    @FALSE: ON ^odorB;
                            Z^csPlusRight;
                            ---> S4
                           
S4, \\ Wait 1 second then send TTL for houselight on to avoid aliasing
        1": Z^hsltON ---> S5

S5, \\ Wait 1 additional second (for odor charging) and then turn on houselight
 	1": On ^houseLight; add F ---> S6

S6, \\ Check nosepoke at ODOR port
  	#R^nspk: Z^nspkON;
                 OFF ^vacuum;
                 SET Q=1;
                 ADD G;
                 IF N=1 [@TRUE,@FALSE]
                         @TRUE:  ADD J ---> S7
                         @FALSE: ADD L ---> S7
                         
	6": OFF ^houseLight;
            Z^hsltOFF;
            OFF ^odorA, ^odorB ---> S2

S7, \\ Turn off odor after nose withdrawal; NB: nspkOFF is marked 10ms after it happens
  	#R^nspk: ADD Q ---> Sx
   	0.01": Z^nspkOFF;
               SET S(G-1)=Q/100;
               ARITHMETICMEAN P=S, 0, G-1;
               SET O=Q/100;
               ADD R;
               ON ^vacuum;
               OFF ^OdorA, ^odorB;
               ---> S8

S8, \\ See if correct behavior
        #R^goInptLeft: IF N=1[@TRUE, @FALSE]
	                      @TRUE:  Z^wentLeft;
                                      SET T(G-1)=8.1;
                                      ON ^pellet;
                                      ADD E, H, K;
                                      --->S9   \\ Correct
                 	      
                              @FALSE: Z^wentLeft;
                                      SET T(G-1)=9.0;
                                      OFF ^houselight;
                                      ---> S11  \\ Incorrect, to penalty
	     
        #R^goInptRight: IF N=1[@TRUE, @FALSE]
	                       @TRUE:  Z^wentRight;
                                       SET T(G-1)=8.0;
                                       OFF ^houselight;
                                       ---> S11  \\ Incorrect, to penalty
                                       
	                       @FALSE: Z^wentRight;
                                       SET T(G-1)=9.1;
                                       ON ^pellet;
                                       ADD E, H, M;
                                       ---> S9  \\ Correct

	5": OFF ^houselight;
            z^hsltOFF;
            IF N=1[@TRUE, @FALSE]
	           @TRUE:  SET T(G-1)=8.0 ---> S2   \\ Incorrect; 
	           @FALSE: SET T(G-1)=9.0 ---> S2   \\ Incorrect; 

S9, \\ Deactivate pellet feeder  
   	0.1": OFF ^Pellet ---> S10 

S10, \\ Turn off houselight after reward period
 	5": OFF ^Houselight;
            Z^hsltOFF;
            ---> S2
 	
S11, \\ Penalty delay part 1, wait 1 second then mark lightOFF2 then to part 2
        1": Z^hsltOFF2 ---> S12

S12, \\ Penalty delay part 2, wait 6 more seconds then restart
        6": ---> S2

S31, \\ Stopabortflush command end of session
        0.01": ---> STOPABORTFLUSH

\\----------------------------------------------------------------------------\\
S.S.2, \\ Count nspkON, nspkOFF write to array Y

S1, \\ 
        #START: ---> S2
 
S2, \\
        #R^nspk: SET Y(U) = X + .1;ADD U ---> S3
        #Z^eos:  SET Y(U) = X + .29,Y(U+1)=-987.987;ADD U ---> Sx   

S3, \\
        #R^nspk: ---> Sx
        0.01": SET Y(U) = X + .2;ADD U ---> S4
 
S4, \\
        0.01": ---> S2

\\----------------------------------------------------------------------------\\
S.S.3, \\ Timer for recording events

S1, \\
  	#START: ---> S2
S2, \\
 	0.01": ADD X ---> Sx

\\----------------------------------------------------------------------------\\
S.S.4, \\ Record Events

S1, \\  
  	#START: ---> S2
        
S2, \\
	#Z^wentLeft:	        SET V(I) = X + .3;ADD I--->Sx
  	#Z^hsltON:		SET V(I) = X + .4;ADD I--->Sx
  	#Z^hsltOFF:		SET V(I) = X + .5;ADD I--->Sx
	#Z^nspkON:		SET V(I) = X + .6;ADD I--->Sx
  	#Z^nspkOFF:		SET V(I) = X + .7;ADD I--->Sx
   	#Z^csPlusLeft:	        SET V(I) = X + .8;ADD I--->Sx
 	#Z^csPlusRight: 	SET V(I) = X + .9;ADD I--->Sx
        #Z^wentRight:	        SET V(I) = X + .11;ADD I--->Sx
        #Z^hsltOFF2:	        SET V(I) = X + .21;ADD I--->Sx
        #Z^eos:	                SET V(I) = X + .29,V(I+1)=-987.987;ADD I--->Sx     

\\----------------------------------------------------------------------------\\
S.S.6, \\ Display event count

S1, \\ 
  	#START: ---> S2

S2, \\ Refresh first line of values on screen (boxes 1-5)
 	0.01": SHOW 1, #Total Trials, F;
               SHOW 2, #Attempts, G;
               SHOW 3, #Correct, H;
               SHOW 4, #Rewards, E;
               SHOW 5, #manual reward, D;
               ---> S3

S3, \\ Refresh second line of values on screen (boxes 6-10)
	0.01": SHOW 6, #LEFT trials, J;
               SHOW 7, #correct LEFT, K;
               SHOW 8, #RIGHT trials, L;
               SHOW 9, #correct RIGHT, M;
               ---> S4

S4, \\ Refresh third line of values on screen (boxes 11-15)
        0.01": SHOW 11, mean sniff time, P;
               SHOW 12, sniff time, O;
               ---> S2
	
\\----------------------------------------------------------------------------\\
S.S.7, \\ Manual reward

S1, \\   
	#START: ---> S2

S2, \\ Look for manswitch input
  	#R^manswitch: On ^pellet;
                      ADD D;
                      ---> S3
  	
S3, \\ Deactivate pellet feeder  
   	0.1": OFF ^pellet ---> S2 
